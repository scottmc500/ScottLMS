name: PR Validation

on:
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual triggering

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Testing
  test:
    name: Test & Code Quality
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest-cov bandit safety

    - name: Install frontend dependencies
      run: |
        pip install -r frontend/requirements.txt

    - name: Set up environment variables
      run: |
        echo "MONGODB_URL=mongodb://localhost:27017/scottlms" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key" >> $GITHUB_ENV
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV
        echo "LOG_LEVEL=info" >> $GITHUB_ENV
        echo "API_BASE_URL=http://localhost:8000" >> $GITHUB_ENV

    - name: Lint backend with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 backend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Lint frontend with flake8
      run: |
        flake8 frontend/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 frontend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics


    - name: Security check backend with bandit
      run: |
        bandit -r backend/ -f json -o backend-bandit-report.json || true
        bandit -r backend/

    - name: Security check frontend with bandit
      run: |
        bandit -r frontend/ -f json -o frontend-bandit-report.json || true
        bandit -r frontend/

    - name: Run backend tests
      run: |
        cd backend && pytest --cov=backend --cov-report=xml --cov-report=html --junitxml=backend-pytest-report.xml

    - name: Run frontend tests
      run: |
        pytest tests/test_frontend_*.py --cov=frontend --cov-report=xml --cov-report=html --junitxml=frontend-pytest-report.xml

    - name: Combine coverage reports
      run: |
        # Combine backend and frontend coverage reports
        coverage combine backend/.coverage .coverage || true
        coverage xml -o combined-coverage.xml

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./combined-coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          backend-pytest-report.xml
          frontend-pytest-report.xml
          combined-coverage.xml
          htmlcov/
          backend-bandit-report.json
          frontend-bandit-report.json

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: scottlms-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: scottlms-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test backend Docker image
      run: |
        # Start the backend container
        docker run -d --name backend-test-container -p 8000:8000 scottlms-backend:test
        
        # Wait for the container to start
        sleep 15
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Clean up
        docker stop backend-test-container
        docker rm backend-test-container

    - name: Test frontend Docker image
      run: |
        # Start the frontend container
        docker run -d --name frontend-test-container -p 8501:8501 scottlms-frontend:test
        
        # Wait for the container to start
        sleep 15
        
        # Test frontend endpoint
        curl -f http://localhost:8501 || exit 1
        
        # Clean up
        docker stop frontend-test-container
        docker rm frontend-test-container

  # Infrastructure Validation
  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Format Check
      run: |
        cd terraform
        terraform fmt -check -recursive

    - name: Terraform Init
      run: |
        cd terraform
        terraform init -backend=false

    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate

    - name: Terraform Plan (Dry Run)
      run: |
        cd terraform
        terraform plan -var="environment=test" -var="project_name=scottlms-test"

  # Kubernetes Manifest Validation
  k8s-validate:
    name: Kubernetes Validation
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Validate Kubernetes manifests
      run: |
        # Validate YAML syntax
        kubectl apply --dry-run=client -k k8s/
        
        # Check for common issues
        kubectl apply --dry-run=client -f k8s/namespace.yaml
        kubectl apply --dry-run=client -f k8s/configmap.yaml
        kubectl apply --dry-run=client -f k8s/secret.yaml
        kubectl apply --dry-run=client -f k8s/deployment.yaml
        kubectl apply --dry-run=client -f k8s/service.yaml
        kubectl apply --dry-run=client -f k8s/ingress.yaml
        kubectl apply --dry-run=client -f k8s/hpa.yaml

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance Testing (Basic)
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [test, docker-build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Start applications
      run: |
        docker run -d --name backend-perf-test -p 8000:8000 -e MONGODB_URL=mongodb://host.docker.internal:27017/scottlms scottlms-backend:test
        docker run -d --name frontend-perf-test -p 8501:8501 -e API_BASE_URL=http://host.docker.internal:8000 scottlms-frontend:test
        sleep 20

    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run performance tests
      run: |
        # Create a simple k6 test for backend API
        cat > backend-performance-test.js << 'EOF'
        import http from 'k6/http';
        import { check } from 'k6';

        export default function () {
          const response = http.get('http://localhost:8000/health');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 500ms': (r) => r.timings.duration < 500,
          });
        }
        EOF
        
        k6 run --vus 10 --duration 30s backend-performance-test.js

    - name: Run frontend performance tests
      run: |
        # Create a simple k6 test for frontend
        cat > frontend-performance-test.js << 'EOF'
        import http from 'k6/http';
        import { check } from 'k6';

        export default function () {
          const response = http.get('http://localhost:8501');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 2000ms': (r) => r.timings.duration < 2000,
          });
        }
        EOF
        
        k6 run --vus 5 --duration 20s frontend-performance-test.js

    - name: Cleanup
      if: always()
      run: |
        docker stop backend-perf-test || true
        docker rm backend-perf-test || true
        docker stop frontend-perf-test || true
        docker rm frontend-perf-test || true

  # Summary
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [test, docker-build, terraform-validate, k8s-validate, security-scan, performance-test]
    if: always()

    steps:
    - name: PR Summary
      run: |
        echo "## 🚀 PR Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Tests & Code Quality | ${{ needs.test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build | ${{ needs.docker-build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Terraform Validation | ${{ needs.terraform-validate.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Kubernetes Validation | ${{ needs.k8s-validate.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance Test | ${{ needs.performance-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "Check the test results artifact for detailed coverage information." >> $GITHUB_STEP_SUMMARY
