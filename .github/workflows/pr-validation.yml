name: Pull Request Validation

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Manual trigger option

jobs:
  validate-terraform:
    name: Validate Terraform Configuration
    runs-on: ubuntu-latest
    env:
      TF_VAR_atlas_public_key: '${{ secrets.MONGODB_ATLAS_PUBLIC_KEY }}'
      TF_VAR_atlas_private_key: '${{ secrets.MONGODB_ATLAS_PRIVATE_KEY }}'
      TF_VAR_atlas_org_id: '${{ secrets.MONGODB_ATLAS_ORG_ID }}'
      TF_VAR_atlas_project_id: '${{ secrets.MONGODB_ATLAS_PROJECT_ID }}'
      TF_VAR_docker_hub_username: '${{ secrets.DOCKER_HUB_USERNAME }}'
      TF_VAR_docker_hub_password: '${{ secrets.DOCKER_HUB_PASSWORD }}'
      TF_VAR_linode_token: '${{ secrets.LINODE_TOKEN }}'
      TF_VAR_linode_cluster_id: '${{ secrets.LINODE_CLUSTER_ID }}'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.13.3'
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Remove terraform.tfvars to use environment variables
        run: |
          if [ -f terraform/terraform.tfvars ]; then
            echo "Removing terraform.tfvars to ensure environment variables are used"
            rm terraform/terraform.tfvars
          else
            echo "No terraform.tfvars file found"
          fi

      - name: Terraform Init
        run: make terraform-init

      - name: Terraform Format Check
        run: make terraform-check-fmt

      - name: Terraform Validate
        run: make terraform-validate

      - name: Debug Environment Variables
        run: |
          echo "Checking environment variables..."
          echo "TF_VAR_atlas_public_key is set: $([ -n "$TF_VAR_atlas_public_key" ] && echo "YES" || echo "NO")"
          echo "TF_VAR_atlas_private_key is set: $([ -n "$TF_VAR_atlas_private_key" ] && echo "YES" || echo "NO")"
          echo "TF_VAR_atlas_org_id is set: $([ -n "$TF_VAR_atlas_org_id" ] && echo "YES" || echo "NO")"
          echo "TF_VAR_atlas_project_id is set: $([ -n "$TF_VAR_atlas_project_id" ] && echo "YES" || echo "NO")"
          echo "TF_VAR_docker_hub_username is set: $([ -n "$TF_VAR_docker_hub_username" ] && echo "YES" || echo "NO")"
          echo "TF_VAR_docker_hub_password is set: $([ -n "$TF_VAR_docker_hub_password" ] && echo "YES" || echo "NO")"
          echo "TF_VAR_linode_token is set: $([ -n "$TF_VAR_linode_token" ] && echo "YES" || echo "NO")"
          echo "TF_VAR_linode_cluster_id is set: $([ -n "$TF_VAR_linode_cluster_id" ] && echo "YES" || echo "NO")"

      - name: Debug Terraform Configuration
        run: |
          echo "Current working directory: $(pwd)"
          echo "Terraform directory contents:"
          ls -la terraform/
          echo ""
          echo "Checking Terraform variables file:"
          cat terraform/variables.tf
          echo ""
          echo "Checking if terraform.tfvars exists:"
          ls -la terraform/terraform.tfvars* || echo "No terraform.tfvars files found"
          echo ""
          echo "Checking Terraform state:"
          cd terraform && terraform show || echo "No state file or not initialized"

      - name: Debug Terraform Variables
        run: |
          echo "Checking what Terraform sees for variables:"
          cd terraform
          echo "Testing terraform validate to check variable resolution..."
          terraform validate -json | jq -r '.diagnostics[] | select(.severity == "error") | .summary' || echo "No validation errors found"
          echo ""
          echo "Checking if terraform can access variables by running a simple plan check..."
          timeout 30 terraform plan -target=random_password.mongodb_user_password -no-color || echo "Plan check completed or timed out"

      - name: Terraform Plan (Dry Run)
        run: |
          echo "Running terraform plan with verbose output..."
          cd terraform
          terraform plan -detailed-exitcode -no-color
        continue-on-error: true

  build-and-test-docker-images:
    name: Build and Test Docker Images
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images using Makefile
        id: build
        run: make docker-build
        env:
          TAG: pr-${{ github.event.number }}

      - name: Test Docker images using Makefile
        run: make docker-test-all
        env:
          TAG: pr-${{ github.event.number }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check Directory
        run: ls -la

      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy Scan Results to GitHub Security Tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
