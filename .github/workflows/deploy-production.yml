name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual triggering

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: scottlms
  ENVIRONMENT: production

jobs:
  # Job 1: Deploy Infrastructure (if needed)
  infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[terraform]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Init
      run: make infra-init
      env:
        CI: true

    - name: Terraform Plan
      run: make infra-plan
      env:
        CI: true

    - name: Terraform Apply
      run: make infra-apply
      env:
        CI: true

  # Job 2: Build and Push Docker Images
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: infrastructure
    if: always() # Run even if infrastructure is skipped

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push backend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  # Job 3: Update Kubernetes Deployment
  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Update Kubernetes Deployment
      run: |
        cd terraform
        # Update the deployment with the new image tag
        terraform apply -var="image_tag=${{ github.sha }}" -auto-approve

    - name: Wait for Deployment Rollout
      run: |
        # Get EKS cluster credentials
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
        
        # Wait for deployment to complete
        kubectl rollout status deployment/scottlms-api -n scottlms --timeout=300s

    - name: Verify Deployment
      run: |
        # Check if pods are running
        kubectl get pods -n scottlms -l app=scottlms-api
        
        # Check service endpoints
        kubectl get endpoints -n scottlms scottlms-api-service

  # Job 4: Run Post-Deployment Tests
  post-deployment-tests:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: deploy-application

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get EKS cluster credentials
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Run Health Check
      run: |
        # Get the ingress URL
        INGRESS_URL=$(kubectl get ingress scottlms-ingress -n scottlms -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Wait for ingress to be ready
        echo "Waiting for ingress to be ready..."
        sleep 60
        
        # Run health check
        curl -f "https://$INGRESS_URL/health" || echo "Health check failed"

    - name: Run Basic API Tests
      run: |
        # Get the ingress URL
        INGRESS_URL=$(kubectl get ingress scottlms-ingress -n scottlms -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Test basic endpoints
        curl -f "https://$INGRESS_URL/docs" || echo "API docs not accessible"
        curl -f "https://$INGRESS_URL/users" || echo "Users endpoint not accessible"
