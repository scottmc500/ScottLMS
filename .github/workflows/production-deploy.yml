name: Production Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Manual trigger option

env:
  TAG: ${{ github.sha }}

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build Docker Images
        run: make docker-build

      - name: Test Docker Images
        run: make docker-test-all

      - name: Push Docker Images
        run: make docker-push

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.13.3'
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Create terraform.tfvars from GitHub Secrets
        run: |
          echo "Creating terraform.tfvars file from GitHub secrets..."
          cat > terraform/terraform.tfvars << EOF
          # Generated from GitHub Secrets for Production Deployment
          atlas_public_key    = "${{ secrets.MONGODB_ATLAS_PUBLIC_KEY }}"
          atlas_private_key   = "${{ secrets.MONGODB_ATLAS_PRIVATE_KEY }}"
          atlas_org_id        = "${{ secrets.MONGODB_ATLAS_ORG_ID }}"
          atlas_project_id    = "${{ secrets.MONGODB_ATLAS_PROJECT_ID }}"
          docker_hub_username = "${{ secrets.DOCKER_HUB_USERNAME }}"
          docker_hub_password = "${{ secrets.DOCKER_HUB_PASSWORD }}"
          linode_token        = "${{ secrets.LINODE_TOKEN }}"
          linode_cluster_id   = "${{ secrets.LINODE_CLUSTER_ID }}"
          app_image_tag       = "${{ env.TAG }}"
          EOF
          echo "terraform.tfvars file created successfully"
          echo "Verifying terraform.tfvars file was created correctly..."
          if [ -f terraform/terraform.tfvars ]; then
            echo "✅ terraform.tfvars file exists"
            echo "File size: $(wc -c < terraform/terraform.tfvars) bytes"
            echo "Number of lines: $(wc -l < terraform/terraform.tfvars)"
            echo ""
            echo "File contents (masked for security):"
            sed 's/= ".*"/= "***MASKED***"/g' terraform/terraform.tfvars
          else
            echo "❌ terraform.tfvars file not found!"
            exit 1
          fi

      - name: Terraform Init
        run: make terraform-init

      - name: Terraform Validate
        run: make terraform-validate

      - name: Terraform Apply
        run: make terraform-apply

      - name: Cleanup terraform.tfvars
        if: always()
        run: |
          echo "Cleaning up terraform.tfvars file for security..."
          if [ -f terraform/terraform.tfvars ]; then
            rm terraform/terraform.tfvars
            echo "✅ terraform.tfvars file removed"
          else
            echo "No terraform.tfvars file to clean up"
          fi

      - name: Synce Kubernetes Cluster
        run: make sync-kubeconfig

      - name: Roll out Deployment
        run: make k8s-rollout-restart

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-infrastructure]
    if: always()
    
    steps:
      - name: Deployment Success
        if: needs.deploy-infrastructure.result == 'success'
        run: |
          echo "✅ Production deployment completed successfully!"
          echo "🚀 Application is live and healthy"

      - name: Save Kubeconfig
        if: needs.deploy-infrastructure.result == 'failure'
        run: make save-kubeconfig

      - name: Get API Logs
        if: needs.deploy-infrastructure.result == 'failure'
        run: kubectl logs -n scottlms deployment/scottlms-api

      - name: Get Frontend Logs
        if: needs.deploy-infrastructure.result == 'failure'
        run: kubectl logs -n scottlms deployment/scottlms-frontend

      - name: Deployment Failure
        if: needs.deploy-infrastructure.result == 'failure'
        run: |
          echo "❌ Production deployment failed!"
          echo "🔍 Check the logs above for details"
          exit 1
