services:
  api:
    container_name: scottlms-api
    image: smchenry2014/scottlms-api:${TAG:-latest}
    platform: linux/amd64
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - MONGODB_URL=mongodb://admin:password@mongodb:27017/scottlms?authSource=admin  # Dev only - DO NOT USE IN PRODUCTION
      - ENVIRONMENT=development
      - LOG_LEVEL=debug
      - CORS_ALLOWED_ORIGINS=http://localhost:80,http://localhost:8501,http://127.0.0.1:80,http://127.0.0.1:8501
    depends_on:
      mongodb:
        condition: service_healthy
      mongo-init:
        condition: service_completed_successfully
    volumes:
      - ./backend:/app
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - scottlms-network

  mongodb:
    container_name: scottlms-mongodb
    image: mongo:7.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password  # Dev only - DO NOT USE IN PRODUCTION
      - MONGO_INITDB_DATABASE=scottlms
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - scottlms-network

  # MongoDB initialization with Node.js and bcrypt
  mongo-init:
    image: node:18-alpine
    depends_on:
      mongodb:
        condition: service_healthy
    volumes:
      - ./scripts:/scripts
    working_dir: /scripts
    command: >
      sh -c "
        echo 'Installing Node.js dependencies...' &&
        npm install &&
        echo 'Starting MongoDB initialization...' &&
        node mongo-init-node.js
      "
    environment:
      - MONGODB_URL=mongodb://admin:password@mongodb:27017/scottlms?authSource=admin  # Dev only - DO NOT USE IN PRODUCTION
    networks:
      - scottlms-network

  mongo-express:
    container_name: scottlms-mongodb-express
    image: mongo-express:1.0.0
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password  # Dev only - DO NOT USE IN PRODUCTION
      - ME_CONFIG_MONGODB_URL=mongodb://admin:password@mongodb:27017/  # Dev only - DO NOT USE IN PRODUCTION
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin  # Dev only - DO NOT USE IN PRODUCTION
    depends_on:
      mongodb:
        condition: service_healthy
      mongo-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8081', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - scottlms-network

  ui:
    container_name: scottlms-ui
    image: smchenry2014/scottlms-ui:${TAG:-latest}
    platform: linux/amd64
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:8501"
    environment:
      - API_BASE_URL=http://api:8000
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - ./frontend:/app
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8501')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - scottlms-network

volumes:
  mongodb_data:

networks:
  scottlms-network:
    driver: bridge
